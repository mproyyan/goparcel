// Code generated by MockGen. DO NOT EDIT.
// Source: ./location_service.go
//
// Generated by this command:
//
//	mockgen -source=./location_service.go -destination=../mock/mock_external_service.go -package=mock
//

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	domain "github.com/mproyyan/goparcel/internal/locations/domain"
	gomock "go.uber.org/mock/gomock"
)

// MockRegionService is a mock of RegionService interface.
type MockRegionService struct {
	ctrl     *gomock.Controller
	recorder *MockRegionServiceMockRecorder
	isgomock struct{}
}

// MockRegionServiceMockRecorder is the mock recorder for MockRegionService.
type MockRegionServiceMockRecorder struct {
	mock *MockRegionService
}

// NewMockRegionService creates a new mock instance.
func NewMockRegionService(ctrl *gomock.Controller) *MockRegionService {
	mock := &MockRegionService{ctrl: ctrl}
	mock.recorder = &MockRegionServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRegionService) EXPECT() *MockRegionServiceMockRecorder {
	return m.recorder
}

// GetRegion mocks base method.
func (m *MockRegionService) GetRegion(ctx context.Context, zipcode string) (*domain.Region, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRegion", ctx, zipcode)
	ret0, _ := ret[0].(*domain.Region)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRegion indicates an expected call of GetRegion.
func (mr *MockRegionServiceMockRecorder) GetRegion(ctx, zipcode any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRegion", reflect.TypeOf((*MockRegionService)(nil).GetRegion), ctx, zipcode)
}
