// Code generated by MockGen. DO NOT EDIT.
// Source: repository.go
//
// Generated by this command:
//
//	mockgen -source repository.go -destination ../mock/mock_shipment_repository.go -package mock
//

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	domain "github.com/mproyyan/goparcel/internal/shipments/domain"
	gomock "go.uber.org/mock/gomock"
)

// MockShipmentRepository is a mock of ShipmentRepository interface.
type MockShipmentRepository struct {
	ctrl     *gomock.Controller
	recorder *MockShipmentRepositoryMockRecorder
	isgomock struct{}
}

// MockShipmentRepositoryMockRecorder is the mock recorder for MockShipmentRepository.
type MockShipmentRepositoryMockRecorder struct {
	mock *MockShipmentRepository
}

// NewMockShipmentRepository creates a new mock instance.
func NewMockShipmentRepository(ctrl *gomock.Controller) *MockShipmentRepository {
	mock := &MockShipmentRepository{ctrl: ctrl}
	mock.recorder = &MockShipmentRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockShipmentRepository) EXPECT() *MockShipmentRepositoryMockRecorder {
	return m.recorder
}

// CreateShipment mocks base method.
func (m *MockShipmentRepository) CreateShipment(ctx context.Context, origin string, sender, recipient domain.Entity, items []domain.Item) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateShipment", ctx, origin, sender, recipient, items)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateShipment indicates an expected call of CreateShipment.
func (mr *MockShipmentRepositoryMockRecorder) CreateShipment(ctx, origin, sender, recipient, items any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateShipment", reflect.TypeOf((*MockShipmentRepository)(nil).CreateShipment), ctx, origin, sender, recipient, items)
}

// LogItinerary mocks base method.
func (m *MockShipmentRepository) LogItinerary(ctx context.Context, shipmentID, locationID string, activityType domain.ActivityType) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LogItinerary", ctx, shipmentID, locationID, activityType)
	ret0, _ := ret[0].(error)
	return ret0
}

// LogItinerary indicates an expected call of LogItinerary.
func (mr *MockShipmentRepositoryMockRecorder) LogItinerary(ctx, shipmentID, locationID, activityType any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LogItinerary", reflect.TypeOf((*MockShipmentRepository)(nil).LogItinerary), ctx, shipmentID, locationID, activityType)
}

// RetrieveShipmentsFromLocations mocks base method.
func (m *MockShipmentRepository) RetrieveShipmentsFromLocations(ctx context.Context, locationsID string, routingStatus domain.RoutingStatus) ([]domain.Shipment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RetrieveShipmentsFromLocations", ctx, locationsID, routingStatus)
	ret0, _ := ret[0].([]domain.Shipment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RetrieveShipmentsFromLocations indicates an expected call of RetrieveShipmentsFromLocations.
func (mr *MockShipmentRepositoryMockRecorder) RetrieveShipmentsFromLocations(ctx, locationsID, routingStatus any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RetrieveShipmentsFromLocations", reflect.TypeOf((*MockShipmentRepository)(nil).RetrieveShipmentsFromLocations), ctx, locationsID, routingStatus)
}
