type Cargo {
  id: ID!
  name: String!
  status: String
  maxCapacity: Capacity!
  currentLoad: Capacity!
  carriers: [Carrier!]!
  itineraries: [Itinerary!]!
  shipments: [Shipment!]!
  last_known_location: Location
}

type Capacity {
  weight: Float!
  volume: Float!
}

type Itinerary {
  location: Location!
  estimated_time_arrival: Time!
  actual_time_arrival: Time
}

type Carrier {
  id: ID!
  user_id: ID!
  name: String!
  email: String!
  status: String
  location: Location
}

input CapacityInput {
  weight: Float!
  volume: Float!
}

input ItineraryInput {
  location_id: ID!
  estimated_time_arrival: Time!
}

extend type Query {
  GetMatchingCargos(origin: ID! destination: ID!): [Cargo!]!
}

extend type Mutation {
  LoadShipment(shipment_id: ID! location_id: ID!): String!
  MarkArrival(cargo_id: ID! location_id: ID!): String!
  CreateCargo(name: String! origin: ID! maxCapacity: CapacityInput!): String!
  AssignCarrier(cargo_id: ID! carrier_ids: [ID!]!): String!
  AssignRoute(cargo_id: ID! itineraries: [ItineraryInput!]!): String!
}