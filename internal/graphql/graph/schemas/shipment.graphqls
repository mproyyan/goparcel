scalar Time

type Item {
    name: String!
    amount: Int!
    weight: Int!
    volume: Int
}

type PartyDetail {
    name: String
    contact: String
    province: String
    city: String
    district: String
    subdistrict: String
    address: String
    zip_code: String
}

type ItineraryLog {
    activity_type: String!
    timestamp: Time!
    location: Location
}

type Shipment {
    id: String!
    airway_bill: String!
    transport_status: String!
    routing_status: String!
    items: [Item!]!
    sender_detail: PartyDetail!
    recipient_detail: PartyDetail!
    origin: Location
    destination: Location
    itinerary_logs: [ItineraryLog]!
    created_at: Time!
}

type TransferRequest {
	id: ID!
	request_type: String!
	shipment: Shipment!
	origin: Origin!
	destination: Destination!
	courier: Courier
	cargo_id: String
	status: String!
	created_at: Time!
}

type Origin {
	location: Location
	requested_by: User
}

type Destination {
	location: Location
	accepted_by: User
	recipient_detail: Entity
}

type Entity {
	name: String
	contact: String
	address: Address
}

type Address {
	province: String
	city: String
	district: String
	subdistrict: String
	street_address: String
	zip_code: String
}

# Input

input CreateShipmentInput {
    origin: ID!
    sender: EntityInput!
    recipient: EntityInput!
    items: [ItemInput!]!
}

input EntityInput {
    name: String!
    phone_number: String!
    zip_code: String!
    street_address: String!
}

input ItemInput {
    name: String!
    amount: Int!
    weight: Int!
    volume: VolumeInput
}

input VolumeInput {
    length: Int
    width: Int
    height: Int
}

input RequestTransitInput {
    shipment_id: ID!
    origin: ID!
    destination: ID!
    courier_id: ID!
}

type Query {
    GetUnroutedShipments(location_id: String!): [Shipment]!
    IncomingShipments(location_id: ID!): [TransferRequest!]!
}

type Mutation {
    CreateShipment(input: CreateShipmentInput): String!
    RequestTransit(input: RequestTransitInput): String!
}
