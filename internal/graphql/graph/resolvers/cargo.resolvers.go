package resolvers

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.66

import (
	"context"
	"fmt"
	"strings"

	"github.com/mproyyan/goparcel/internal/common/auth"
	"github.com/mproyyan/goparcel/internal/common/genproto"
	"github.com/mproyyan/goparcel/internal/graphql/graph/generated"
	"github.com/mproyyan/goparcel/internal/graphql/graph/middlewares"
	"github.com/mproyyan/goparcel/internal/graphql/graph/model"
)

// Carriers is the resolver for the carriers field.
func (r *cargoResolver) Carriers(ctx context.Context, obj *model.Cargo) ([]*model.Carrier, error) {
	if obj.ID == "" || obj.Carriers == nil {
		return nil, nil
	}

	var carrierIds []string
	for _, carrier := range obj.Carriers {
		if carrier == nil {
			continue
		}

		carrierIds = append(carrierIds, carrier.ID)
	}

	stringCarrierIds := strings.Join(carrierIds, ",")
	key := fmt.Sprintf("%s:%s", obj.ID, stringCarrierIds)

	return r.carriersLoader.Load(ctx, key)
}

// Shipments is the resolver for the shipments field.
func (r *cargoResolver) Shipments(ctx context.Context, obj *model.Cargo) ([]*model.Shipment, error) {
	if obj.ID == "" || obj.Shipments == nil {
		return nil, nil
	}

	var shipmentIds []string
	for _, shipment := range obj.Shipments {
		if shipment == nil {
			continue
		}

		shipmentIds = append(shipmentIds, shipment.ID)
	}

	stringShipmentIds := strings.Join(shipmentIds, ",")
	key := fmt.Sprintf("%s:%s", obj.ID, stringShipmentIds)

	return r.shipmentsLoader.Load(ctx, key)
}

// LastKnownLocation is the resolver for the last_known_location field.
func (r *cargoResolver) LastKnownLocation(ctx context.Context, obj *model.Cargo) (*model.Location, error) {
	if obj.LastKnownLocation == nil {
		return nil, nil
	}

	if obj.LastKnownLocation.ID == "" {
		return nil, nil
	}

	return r.locationLoader.Load(ctx, obj.LastKnownLocation.ID)
}

// Location is the resolver for the location field.
func (r *carrierResolver) Location(ctx context.Context, obj *model.Carrier) (*model.Location, error) {
	if obj.Location == nil {
		return nil, nil
	}

	if obj.Location.ID == "" {
		return nil, nil
	}

	return r.locationLoader.Load(ctx, obj.Location.ID)
}

// Location is the resolver for the location field.
func (r *itineraryResolver) Location(ctx context.Context, obj *model.Itinerary) (*model.Location, error) {
	if obj.Location == nil {
		return nil, nil
	}

	if obj.Location.ID == "" {
		return nil, nil
	}

	return r.locationLoader.Load(ctx, obj.Location.ID)
}

// LoadShipment is the resolver for the LoadShipment field.
func (r *mutationResolver) LoadShipment(ctx context.Context, shipmentID string, locationID string) (string, error) {
	authUser, err := middlewares.GetAuthUser(ctx)
	if err != nil {
		return "", err
	}

	ctx = auth.SendAuthUser(ctx, authUser.UserID, authUser.ModelID)
	_, err = r.cargoService.LoadShipment(ctx, &genproto.LoadShipmentRequest{
		LocationId: locationID,
		ShipmentId: shipmentID,
	})

	if err != nil {
		return "", err
	}

	return "shipment loaded successfully", nil
}

// GetMatchingCargos is the resolver for the GetMatchingCargos field.
func (r *queryResolver) GetMatchingCargos(ctx context.Context, origin string, destination string) ([]*model.Cargo, error) {
	result, err := r.cargoService.GetMatchingCargos(ctx, &genproto.GetMatchingCargosRequest{
		Origin:      origin,
		Destination: destination,
	})

	if err != nil {
		fmt.Println("panggil")
		return nil, err
	}

	return cargosToGraphResponse(result.Cargos), nil
}

// Cargo returns generated.CargoResolver implementation.
func (r *Resolver) Cargo() generated.CargoResolver { return &cargoResolver{r} }

// Carrier returns generated.CarrierResolver implementation.
func (r *Resolver) Carrier() generated.CarrierResolver { return &carrierResolver{r} }

// Itinerary returns generated.ItineraryResolver implementation.
func (r *Resolver) Itinerary() generated.ItineraryResolver { return &itineraryResolver{r} }

type cargoResolver struct{ *Resolver }
type carrierResolver struct{ *Resolver }
type itineraryResolver struct{ *Resolver }
