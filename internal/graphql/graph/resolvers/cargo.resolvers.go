package resolvers

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.66

import (
	"context"
	"fmt"
	"strings"

	"github.com/mproyyan/goparcel/internal/common/genproto"
	"github.com/mproyyan/goparcel/internal/graphql/graph/generated"
	"github.com/mproyyan/goparcel/internal/graphql/graph/model"
)

// Shipments is the resolver for the shipments field.
func (r *cargoResolver) Shipments(ctx context.Context, obj *model.Cargo) ([]*model.Shipment, error) {
	if obj.ID == "" || obj.Shipments == nil {
		return nil, nil
	}

	var shipmentIds []string
	for _, shipment := range obj.Shipments {
		if shipment == nil {
			continue
		}

		shipmentIds = append(shipmentIds, shipment.ID)
	}

	stringShipmentIds := strings.Join(shipmentIds, ",")
	key := fmt.Sprintf("%s:%s", obj.ID, stringShipmentIds)

	return r.shipmentsLoader.Load(ctx, key)
}

// GetMatchingCargos is the resolver for the GetMatchingCargos field.
func (r *queryResolver) GetMatchingCargos(ctx context.Context, origin string, destination string) ([]*model.Cargo, error) {
	result, err := r.cargoService.GetMatchingCargos(ctx, &genproto.GetMatchingCargosRequest{
		Origin:      origin,
		Destination: destination,
	})

	if err != nil {
		fmt.Println("panggil")
		return nil, err
	}

	return cargosToGraphResponse(result.Cargos), nil
}

// Cargo returns generated.CargoResolver implementation.
func (r *Resolver) Cargo() generated.CargoResolver { return &cargoResolver{r} }

type cargoResolver struct{ *Resolver }
