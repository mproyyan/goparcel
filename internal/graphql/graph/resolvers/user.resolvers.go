package resolvers

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.66

import (
	"context"

	"github.com/mproyyan/goparcel/internal/common/genproto"
	"github.com/mproyyan/goparcel/internal/graphql/graph/model"
)

// Login is the resolver for the Login field.
func (r *mutationResolver) Login(ctx context.Context, email string, password string) (string, error) {
	result, err := r.userService.Login(ctx, &genproto.LoginRequest{
		Email:    email,
		Password: password,
	})

	if err != nil {
		return "", err
	}

	return result.Token, nil
}

// RegisterAsOperator is the resolver for the RegisterAsOperator field.
func (r *mutationResolver) RegisterAsOperator(ctx context.Context, input model.RegisterAsOperatorInput) (string, error) {
	_, err := r.userService.RegisterAsOperator(ctx, &genproto.RegisterAsOperatorRequest{
		Name:     input.Name,
		Email:    input.Email,
		Password: input.Password,
		Location: input.LocationID,
		Type:     input.Type.String(),
	})

	if err != nil {
		return "", err
	}

	return "registration as an operator has been successful", nil
}

// RegisterAsCourier is the resolver for the RegisterAsCourier field.
func (r *mutationResolver) RegisterAsCourier(ctx context.Context, input model.RegisterAsCourierInput) (string, error) {
	_, err := r.userService.RegisterAsCourier(ctx, &genproto.RegisterAsCourierRequest{
		Name:     input.Name,
		Email:    input.Email,
		Password: input.Password,
		Location: input.LocationID,
	})

	if err != nil {
		return "", err
	}

	return "registration as a courier has been successful", nil
}

// RegisterAsCarrier is the resolver for the RegisterAsCarrier field.
func (r *mutationResolver) RegisterAsCarrier(ctx context.Context, input model.RegisterAsCarrierInput) (string, error) {
	_, err := r.userService.RegisterAsCarrier(ctx, &genproto.RegisterAsCarrierRequest{
		Name:     input.Name,
		Email:    input.Email,
		Password: input.Password,
		Location: input.LocationID,
	})

	if err != nil {
		return "", err
	}

	return "registration as a carrier has been successful", nil
}
