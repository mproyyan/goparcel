package resolvers

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.66

import (
	"context"
	"fmt"

	"github.com/mproyyan/goparcel/internal/graphql/graph/generated"
	"github.com/mproyyan/goparcel/internal/graphql/graph/model"
)

// Warehouse is the resolver for the warehouse field.
func (r *locationResolver) Warehouse(ctx context.Context, obj *model.Location) (*model.Location, error) {
	panic(fmt.Errorf("not implemented: Warehouse - warehouse"))
}

// CreateLocation is the resolver for the CreateLocation field.
func (r *mutationResolver) CreateLocation(ctx context.Context, input *model.CreateLocationInput) (string, error) {
	panic(fmt.Errorf("not implemented: CreateLocation - CreateLocation"))
}

// GetLocation is the resolver for the GetLocation field.
func (r *queryResolver) GetLocation(ctx context.Context, id string) (*model.Location, error) {
	panic(fmt.Errorf("not implemented: GetLocation - GetLocation"))
}

// GetRegion is the resolver for the GetRegion field.
func (r *queryResolver) GetRegion(ctx context.Context, zipCode string) (*model.Region, error) {
	panic(fmt.Errorf("not implemented: GetRegion - GetRegion"))
}

// GetTransitPlaces is the resolver for the GetTransitPlaces field.
func (r *queryResolver) GetTransitPlaces(ctx context.Context, id string) ([]*model.Location, error) {
	panic(fmt.Errorf("not implemented: GetTransitPlaces - GetTransitPlaces"))
}

// Location returns generated.LocationResolver implementation.
func (r *Resolver) Location() generated.LocationResolver { return &locationResolver{r} }

type locationResolver struct{ *Resolver }
