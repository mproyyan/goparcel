// Code generated by MockGen. DO NOT EDIT.
// Source: domain/repository.go
//
// Generated by this command:
//
//	mockgen -source=domain/repository.go -destination=mocks/courier_repository_mock.go -package=mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	domain "github.com/mproyyan/goparcel/internal/couriers/domain"
	gomock "go.uber.org/mock/gomock"
)

// MockCourierRepository is a mock of CourierRepository interface.
type MockCourierRepository struct {
	ctrl     *gomock.Controller
	recorder *MockCourierRepositoryMockRecorder
	isgomock struct{}
}

// MockCourierRepositoryMockRecorder is the mock recorder for MockCourierRepository.
type MockCourierRepositoryMockRecorder struct {
	mock *MockCourierRepository
}

// NewMockCourierRepository creates a new mock instance.
func NewMockCourierRepository(ctrl *gomock.Controller) *MockCourierRepository {
	mock := &MockCourierRepository{ctrl: ctrl}
	mock.recorder = &MockCourierRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCourierRepository) EXPECT() *MockCourierRepositoryMockRecorder {
	return m.recorder
}

// AvailableCouriers mocks base method.
func (m *MockCourierRepository) AvailableCouriers(ctx context.Context, locationID string) ([]domain.Courier, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AvailableCouriers", ctx, locationID)
	ret0, _ := ret[0].([]domain.Courier)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AvailableCouriers indicates an expected call of AvailableCouriers.
func (mr *MockCourierRepositoryMockRecorder) AvailableCouriers(ctx, locationID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AvailableCouriers", reflect.TypeOf((*MockCourierRepository)(nil).AvailableCouriers), ctx, locationID)
}
