// Code generated by MockGen. DO NOT EDIT.
// Source: user_service.go
//
// Generated by this command:
//
//	mockgen -source user_service.go -destination ../mock/mock_external_service.go -package mock
//

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	user "github.com/mproyyan/goparcel/internal/users/domain/user"
	gomock "go.uber.org/mock/gomock"
)

// MockLocationService is a mock of LocationService interface.
type MockLocationService struct {
	ctrl     *gomock.Controller
	recorder *MockLocationServiceMockRecorder
	isgomock struct{}
}

// MockLocationServiceMockRecorder is the mock recorder for MockLocationService.
type MockLocationServiceMockRecorder struct {
	mock *MockLocationService
}

// NewMockLocationService creates a new mock instance.
func NewMockLocationService(ctrl *gomock.Controller) *MockLocationService {
	mock := &MockLocationService{ctrl: ctrl}
	mock.recorder = &MockLocationServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockLocationService) EXPECT() *MockLocationServiceMockRecorder {
	return m.recorder
}

// GetLocation mocks base method.
func (m *MockLocationService) GetLocation(ctx context.Context, locationID string) (*user.Location, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLocation", ctx, locationID)
	ret0, _ := ret[0].(*user.Location)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLocation indicates an expected call of GetLocation.
func (mr *MockLocationServiceMockRecorder) GetLocation(ctx, locationID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLocation", reflect.TypeOf((*MockLocationService)(nil).GetLocation), ctx, locationID)
}
