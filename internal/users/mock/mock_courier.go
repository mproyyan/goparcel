// Code generated by MockGen. DO NOT EDIT.
// Source: ./repository.go
//
// Generated by this command:
//
//	mockgen -source=./repository.go -destination=../../mock/mock_courier.go -package=mock
//

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	courier "github.com/mproyyan/goparcel/internal/users/domain/courier"
	gomock "go.uber.org/mock/gomock"
)

// MockCourierRepository is a mock of CourierRepository interface.
type MockCourierRepository struct {
	ctrl     *gomock.Controller
	recorder *MockCourierRepositoryMockRecorder
	isgomock struct{}
}

// MockCourierRepositoryMockRecorder is the mock recorder for MockCourierRepository.
type MockCourierRepositoryMockRecorder struct {
	mock *MockCourierRepository
}

// NewMockCourierRepository creates a new mock instance.
func NewMockCourierRepository(ctrl *gomock.Controller) *MockCourierRepository {
	mock := &MockCourierRepository{ctrl: ctrl}
	mock.recorder = &MockCourierRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCourierRepository) EXPECT() *MockCourierRepositoryMockRecorder {
	return m.recorder
}

// CreateCourier mocks base method.
func (m *MockCourierRepository) CreateCourier(ctx context.Context, courier courier.Courier) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateCourier", ctx, courier)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateCourier indicates an expected call of CreateCourier.
func (mr *MockCourierRepositoryMockRecorder) CreateCourier(ctx, courier any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCourier", reflect.TypeOf((*MockCourierRepository)(nil).CreateCourier), ctx, courier)
}
