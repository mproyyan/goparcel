// Code generated by MockGen. DO NOT EDIT.
// Source: domain/operator/repository.go
//
// Generated by this command:
//
//	mockgen -source domain/operator/repository.go -destination mock/mock_operator.go -package mock
//

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	operator "github.com/mproyyan/goparcel/internal/users/domain/operator"
	gomock "go.uber.org/mock/gomock"
)

// MockOperatorRepository is a mock of OperatorRepository interface.
type MockOperatorRepository struct {
	ctrl     *gomock.Controller
	recorder *MockOperatorRepositoryMockRecorder
	isgomock struct{}
}

// MockOperatorRepositoryMockRecorder is the mock recorder for MockOperatorRepository.
type MockOperatorRepositoryMockRecorder struct {
	mock *MockOperatorRepository
}

// NewMockOperatorRepository creates a new mock instance.
func NewMockOperatorRepository(ctrl *gomock.Controller) *MockOperatorRepository {
	mock := &MockOperatorRepository{ctrl: ctrl}
	mock.recorder = &MockOperatorRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockOperatorRepository) EXPECT() *MockOperatorRepositoryMockRecorder {
	return m.recorder
}

// CreateOperator mocks base method.
func (m *MockOperatorRepository) CreateOperator(ctx context.Context, operator operator.Operator) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateOperator", ctx, operator)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateOperator indicates an expected call of CreateOperator.
func (mr *MockOperatorRepositoryMockRecorder) CreateOperator(ctx, operator any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateOperator", reflect.TypeOf((*MockOperatorRepository)(nil).CreateOperator), ctx, operator)
}
