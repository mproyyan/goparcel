services:
  cargo-service:
    container_name: cargo-service
    build:
      context: .
      dockerfile: internal/cargos/Dockerfile
    environment:
      - GRPC_PORT=5555
    env_file:
      - .env
    depends_on:
      mongodb:
        condition: service_healthy
    networks:
      - app_network

  courier-service:
    container_name: courier-service
    build:
      context: .
      dockerfile: internal/couriers/Dockerfile
    environment:
      - GRPC_PORT=6666
    env_file:
      - .env
    depends_on:
      mongodb:
        condition: service_healthy
    networks:
      - app_network

  user-service:
    container_name: user-service
    build:
      context: .
      dockerfile: internal/users/Dockerfile
    environment:
      - GRPC_PORT=7777
    env_file:
      - .env
    depends_on:
      mongodb:
        condition: service_healthy
    networks:
      - app_network

  location-service:
    container_name: location-service
    build:
      context: .
      dockerfile: internal/locations/Dockerfile
    environment:
      - GRPC_PORT=8888
    env_file:
      - .env
    depends_on:
      mongodb:
        condition: service_healthy
    networks:
      - app_network

  shipment-service:
    container_name: shipment-service
    build:
      context: .
      dockerfile: internal/shipments/Dockerfile
    environment:
      - GRPC_PORT=9999
    env_file:
      - .env
    depends_on:
      mongodb:
        condition: service_healthy
    networks:
      - app_network
  
  api-gateway:
    container_name: api-gateway
    build:
      context: .
      dockerfile: internal/graphql/Dockerfile
    environment:
      - API_GATEWAY_HOST=0.0.0.0
      - API_GATEWAY_PORT=1234
    ports:
      - 1234:1234
    env_file:
      - .env
    depends_on:
      - cargo-service
      - courier-service
      - user-service
      - location-service
      - shipment-service
    networks:
      - app_network

  mongodb:
    image: mongodb/mongodb-community-server:6.0-ubi9
    container_name: mongodb
    restart: always
    ports:
      - "27018:27017"
    networks:
      - app_network
    volumes:
      - mongo_data:/data/db
      - ./healthcheck.sh:/mongodb/healthcheck.sh
      - ./seed.sh:/docker-entrypoint-initdb.d/seed.sh
    # environment:
    #   MONGODB_INITDB_ROOT_USERNAME: ${MONGO_INITDB_ROOT_USERNAME}
    #   MONGODB_INITDB_ROOT_PASSWORD: ${MONGO_INITDB_ROOT_PASSWORD}
    command: [ "mongod", "--replSet", "rs0", "--bind_ip_all", ]
    healthcheck:
      test: /mongodb/healthcheck.sh
      interval: 1m30s
      timeout: 30s
      retries: 5
      start_period: 10s

networks:
  app_network:
    driver: bridge

volumes:
  mongo_data:
